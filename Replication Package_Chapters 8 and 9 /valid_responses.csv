Progress,Finished,Q1,Q3,Q3_8_TEXT,Q50,Q50_12_TEXT,Q5,Q7,Q7_11_TEXT,Q58,Q8,Q8_11_TEXT,Q10,Q10_5_TEXT,Q11,Q12,Q12_6_TEXT,Q13,Q14,Q14_6_TEXT,Q15,Q15_7_TEXT,Q16,Q52,Q52_6_TEXT,Q9,Q17_1,Q17_1_TEXT,Q18_1,Q18_1_TEXT,Q19_1,Q19_1_TEXT,Q54_1,Q54_1_TEXT,Q55_1,Q55_1_TEXT,Q20,Q21,Q23,Q23_6_TEXT,Q24,Q44,Q44_6_TEXT,Q45,Q46,Q46_6_TEXT,Q25_1,Q25_1_TEXT,Q26_1,Q26_1_TEXT,Q43_1,Q43_1_TEXT,Q58_1,Q58_1_TEXT,Q59_1,Q59_1_TEXT,Q49,Q49_1_TEXT,Q49_2_TEXT,Q49_3_TEXT,Q49_4_TEXT,Q49_5_TEXT,Q49_6_TEXT,Q50.1,Q50_1_TEXT,Q50_2_TEXT,Q50_3_TEXT,Q50_4_TEXT,Q50_5_TEXT,Q50_7_TEXT,Q51,Q51_1_TEXT,Q51_2_TEXT,Q51_3_TEXT,Q51_4_TEXT,Q51_5_TEXT,Q51_7_TEXT,Q27_1,Q27_1_TEXT,Q28_1,Q28_1_TEXT,Q42_1,Q42_1_TEXT,Q29,Q30,Q40,Q34,Q35,Q35_25_TEXT,Q37,Q37_4_TEXT,Q38
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Project Manager/ Product Manager/ Team Lead,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,Less than an year,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,"Initially tasked with revamping the UI of a merchant app, we later discovered the client lacked backend support for existing features. Originally, we were only responsible for UI changes, but ended up developing the backend as well.","Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation",,During designing the software architecture,,,,,,,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS),Yes, there were new Requirements Engineering (RE) costs, e.g., having to conduct new user interviews",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"During designing the software architecture,During implementing software features,During testing the software features",Strongly agree,,Strongly agree,,Somewhat agree,,Strongly agree,,Strongly agree,,,,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that was precisely veracity requirements","Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,,,,,,,,,,,,,,Process,,,,,,,Data,,,,,,,Process,,,,,,,Strongly agree,,Strongly agree,,Strongly agree,,,,Sri Lanka,Large Business - International,Finance,,A hybrid approach of both traditional and agile approaches,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Systems Architect/ Software Architect/ Tech Lead,,"Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Not capturing essential user needs while gathering requirements,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements,Lack of requirements traceability",,"In a recent project, we had to do the data migration from the legacy system to our ERP. However the Clint was keen to Hanover the data ownership to us. This lead us to change the entire project time line as the data ownership should be in customer side and holding it through the project have many detrimental impacts for both implementation wise and data wise ","Not documenting requirements at all,Changes in the requirements documentation,Lack of requirements validation with the user,Inadequate (incorrect or partial) implementation of the requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,We fixed them only when the end user complained after delivery,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were new Requirements Engineering (RE) costs, e.g., having to conduct new user interviews",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features,Quick fixes just before delivering the software",Strongly agree,This is tightly bound with the project budgets and timeline so this kind of thing must be  well informed down the line,Strongly agree,This will show the impacts on business flow and help users to do the day today business seamlessly,Strongly disagree,,Strongly agree,,Strongly agree,,We have internal tools to do this,"Project budget and timeline, and the criticality and business impact of the problem","Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,"Yes, that was precisely veracity requirements","Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,,,,,,,,,,,,,,Data,,,,,,,Financial Data,,,,,,,Data,,,,,,,,"Yes, depend on the olementaion methodology, some small changes may have disasterus consequence down the line ",,End users will not be able to proceed with business flow if not fixed,Strongly agree,,Change request handeling,Business impact,Canada,Large Business - International,Enterprise Resource Planning (ERP),,A hybrid approach of both traditional and agile approaches,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring",,1-2 years,"Not documenting requirements at all,Changes in the requirements documentation,Inadequate (incorrect or partial) implementation of requirements",,,"Changes in the requirements documentation,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,A quick fix just before delivering the software,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS)",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features,Quick fixes just before delivering the software",Somewhat agree,,Neither agree nor disagree,,Somewhat disagree,,Somewhat agree,,Somewhat agree,,,,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"NO, the problem was not related to veracity requirements at all",,,,"Regulatory Veracity requirements: compliance with standards and regulations,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,Neither agree nor disagree,,Somewhat agree,,Somewhat agree,,Neither agree nor disagree,,Strongly agree,,Regulatory,,,,,,,Data,,,,,,,Financial Data,,,,,,,Somewhat agree,,Neither agree nor disagree,,Strongly agree,,,,,,"Growing/ Farming other Organic products,Automotive,Avionics,Compliance, Audits and Certification,Finance,Government Regulations / Policies,Healthcare",,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Business Analyst/ Requirements Engineer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,1-2 years,"Not capturing essential user needs while gathering requirements,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Inadequate (incorrect or partial) implementation of requirements,Lack of requirements traceability",,,"Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,We fixed them only when the end user complained after delivery,,"NO, did not formally or informally quantify the effort or cost to fix at all",Other (Please specify),Since most of those are issues from the project team.,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were new Requirements Engineering (RE) costs, e.g., having to conduct new user interviews",,,,,During testing the software features,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,,,"Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements","Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,,,,,,,,,,,,,,Process,,,,,,,Financial Data,,,,,,,Cultural,,,,,,,Strongly agree,,Strongly agree,,Strongly agree,,,,Sri Lanka,Small to Medium Business (SME) - Domestic,Other (Please specify),All,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring",,Less than an year,"Not capturing essential user needs while gathering requirements,Changes in the requirements documentation",,A new requirement was added and we had to change the UIs ,,,Before designing or implementing the software system,,,,,,,,"Yes, there were rework code costs, e.g., refactoring software code",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,,Strongly agree,,Strongly agree,,Strongly disagree,,Somewhat agree,,Neither agree nor disagree,,,,,,,,,,,,,,,,,,,,,,Regulatory,,,,,,,Regulatory,,,,,,,Regulatory,,,,,,,Neither agree nor disagree,,Neither agree nor disagree,,Neither agree nor disagree,,,,Sri Lanka,Large Business - Domestic,Enterprise Resource Planning (ERP),,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring",,Less than an year,"Changes in the requirements documentation,Lack of requirements validation with the user,Inadequate (incorrect or partial) implementation of requirements",,Requirements were not clear to the Dev team so they mislead by the wrong requirements,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation",,During implementing software features,,"NO, did not formally or informally quantify the effort or cost to fix at all",Some decisions are made by experience (expert judgment) rather than quantifying efforts or costs,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were new code costs, e.g., writing new software code",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,During implementing software features,Strongly agree,,Somewhat agree,,Somewhat agree,,Neither agree nor disagree,,Somewhat agree,,,,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,"Yes, that was precisely veracity requirements",,,,,,,,,,,,,,,,Process,,,,,,,Process,,,,,,,,,,,,,,Somewhat agree,,Strongly agree,,Somewhat agree,,,,,,Telecommunication,,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",,,,,Less than an year,"Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Other (Please specify)","Between the user and the developer there are up to 5 different people writing product requirements and translating that into technical requirements. When the developer receives the user stories, they can be very distant from the user feedback they are supposed to address. ","There was a use case that was completely missed when the requirements were written, and it was only discovered when the product was deployed in production","Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Lack of requirements validation with the user",,We fixed them only when the end user complained after delivery,,"NO, did not formally or informally quantify the effort or cost to fix at all",Other (Please specify),We considered the fix as a new project ,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework code costs, e.g., refactoring software code",,"NO, did not formally or informally quantify the extra efforts or costs at all",Other (Please specify),"We didn’t have a need to do it, so we didn’t",Quick fixes just before delivering the software,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,"Development costs, user benefits (I.e. time saving, business opportunity, NPS), operational risks (I.e. potential downtime)",I wouldn’t consider anything else,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"NO, the problem was not related to veracity requirements at all",,,We launched a new process based on a misinterpretation of a regulation,Regulatory Veracity requirements: compliance with standards and regulations,,Strongly disagree,,Neither agree nor disagree,,Strongly agree,,Strongly agree,,Neither agree nor disagree,,Cultural,,,,,Cultural attributes are the only ones in my list that look less compulsory and could be deemed as optional if the cost is too high,,Process,,,,"When improving a process, it’s always important to measure the impact we expect that change to bring",,,Regulatory,"Together with data and financial data, they could have very serious and expensive consequences for the business and that’s enough reason to fix them ",,,,,,Neither agree nor disagree,,Somewhat agree,,Strongly agree,,"There are millions of tools and techniques, it will depend on the specific nature of each issue",I think consequences is the most important one,New Zealand,Large Business - Domestic,Finance,,A hybrid approach of both traditional and agile approaches,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,2-5 years,"Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,Having to constantly tweak the implementation as the requirements kept changing before the main deadline. This was not iterative work.,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Inadequate (incorrect or partial) implementation of the requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,During implementing software features,,"Yes, informally quantified the effort or cost to fix, e.g., had some expectation of cost in terms of effort spent",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"During designing the software architecture,During implementing software features,Quick fixes just before delivering the software",Somewhat agree,,Strongly agree,,Somewhat agree,,Neither agree nor disagree,,Neither agree nor disagree,,Developer time spent on working on implementing in correct requirements.,What the impact of that requirement is to the overall product.,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"NO, the problem was not related to veracity requirements at all",,,,,,Strongly agree,,Strongly agree,,Somewhat agree,,Neither agree nor disagree,,Neither agree nor disagree,,Regulatory,,,,,,,Cultural,,,,,,,Financial Data,,,,,,,Somewhat agree,,Neither agree nor disagree,,Strongly agree,,,,New Zealand,Small to Medium Business (SME) - International,Finance,,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,More than 10 years,"Not capturing essential user needs while gathering requirements,Lack of requirements validation with the user,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,Not capturing the volumes that would need to be handled by the system and the users,"Not capturing essential user needs while gathering requirements,Lack of requirements validation with the user",,Before designing or implementing the software system,,,,,,,,Other (Please specify),We pivoted out as the problem was found during building a MVP (Minimum Viable Product) to evaluate the Epic Hypothesis.,,,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features",Somewhat disagree,,Somewhat disagree,,Somewhat disagree,,Neither agree nor disagree,,Neither agree nor disagree,,"User Stories in an Agile way, Card, Conversation, Check. I.e the system is developed iteratively in close cooperation with the end users.","Priority, using models like WSJF, Weighted Shortest Job First ","Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,"NO, the problem was not related to veracity requirements at all",,,The regulatory requirements were very complicated and the end users did not have enough time to share them with the agile development team.,Regulatory Veracity requirements: compliance with standards and regulations,,Somewhat disagree,,Somewhat disagree,,Somewhat disagree,,Somewhat disagree,,Neither agree nor disagree,,Regulatory,,,,,,,Regulatory,,,,,,,Regulatory,,,,,,,Somewhat agree,,Somewhat agree,,Strongly agree,,"WSJF, Weighted Shortest Job First ",Priority ,Sweden,Large Business - International,Automotive,,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,1-2 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Inadequate (incorrect or partial) implementation of requirements",,Requirements not communicated by the client until changes were being tested.,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Lack of requirements validation with the user",,During testing the software features,,"Yes, informally quantified the effort or cost to fix, e.g., had some expectation of cost in terms of effort spent",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were new design costs, e.g., adding new components to the software architecture",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"Before designing or implementing the software system,During designing the software architecture",,,Somewhat agree,,Neither agree nor disagree,,Somewhat agree,,Somewhat agree,,Comparing with previous changes,Deadlines,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data",,,,,,,,,,,,,,,Regulatory,,,,,,,Regulatory,,,,,,,Regulatory,,,,,,,Somewhat disagree,,Somewhat agree,,Strongly agree,,,,New Zealand,Large Business - Domestic,Energy,,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,1-2 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,"The initial implemenation of a project did not meet all the requirements. A refactored solution had to be found. The initial solution was incorrectly or not documented, hindering the developers' ability to figure out wha specific requirements were not met and what components had to be modified.",Inadequate (incorrect or partial) implementation of the requirements,,During implementing software features,,"Yes, informally quantified the effort or cost to fix, e.g., had some expectation of cost in terms of effort spent",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework code costs, e.g., refactoring software code,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS)",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,During implementing software features,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,,(1) The level of uncertainty regarding those factors. (2) The estimated missing information that is unknown when making the decision.,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data",,"Yes, that included veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,,,,,,,,,,,,,,Other (Please specify the type and why),,,,,,I am not informed enough on the topic to answer this question.,Other (Please specify the type and why),,,,,,I am not informed enough on the topic to answer this question.,Other (Please specify the type and why),,,,,,I am not informed enough on the topic to answer this question.,Strongly agree,,Strongly agree,,Strongly agree,,,The same as for standard requirements.,France,Large Business - International,"Avionics,Distribution / Transportation/ Logistics",,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Other (Please specify),PhD candidate,"Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,More than 10 years,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Lack of requirements validation with the user,Inadequate (incorrect or partial) implementation of requirements,Other (Please specify)",Continuing change in the wider environment causing continuing change in the requirements,Watefall methodology. Requirements signed off but parked for lack of resources. Restarted at later date but requirements no longer fit for current purpose.,Other (Please specify),As per previous answer. Inability to continuously adapt to continuously changing requirements. changing,We DID NOT fix them,,,,,,,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS),Yes, there were new Requirements Engineering (RE) costs, e.g., having to conduct new user interviews",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features,Quick fixes just before delivering the software",Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Somewhat agree,,,An assessment of how much/how quickly requirements will continue to change in the future,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements","Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Neither agree nor disagree,,Neither agree nor disagree,,Neither agree nor disagree,,,Its not clear to me that veracity requirements involve different considerations to other requirements,New Zealand,Large Business - Domestic,,,A hybrid approach of both traditional and agile approaches,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Project Manager/ Product Manager/ Team Lead,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Implementing feature enhancements,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor,Other (Please specify)",Product stack Roadmap improvements,5-10 years,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability,Other (Please specify)",Requirements mapping against Product Roadmap,Customer Transaction al data were accumulated at a rate not expected or monitored. The quantity of data did not support the reporting query structures. Basic transaction detail reports had be redesigned while cus suffered outageto be ,"Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Other (Please specify)",Data growth not considered during report design,We fixed them only when the end user complained after delivery,,"Yes, informally quantified the effort or cost to fix, e.g., had some expectation of cost in terms of effort spent",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework code costs, e.g., refactoring software code,Other (Please specify)",Dent in customer confidence,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"Before designing or implementing the software system,During designing the software architecture,During testing the software features",Strongly agree,,Somewhat agree,,Somewhat agree,,Strongly agree,,Somewhat agree,,A Home-grown matrix involving cost and quality factors,Time to Delivery,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,"Yes, that included veracity requirements","Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,,,,,,,,,,,,,,Data,,,,,,,Data,,,,,,,Financial Data,,,,,,,Strongly agree,,Somewhat agree,,Strongly agree,,Custom Matrices ,Time to deliver/ market,Sri Lanka,Large Business - Domestic,"Finance,Other (Please specify)",Loyalty and Fintech,A hybrid approach of both traditional and agile approaches,,Did help self assess an area not given enough quantifying importance.
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,1-2 years,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements,Lack of requirements traceability",,Concurrency issues caused by more application users than initially expected. Refactor necessary to solve the problem.,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation",,During implementing software features,,"NO, did not formally or informally quantify the effort or cost to fix at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the effort or cost to fix,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were rework code costs, e.g., refactoring software code",,"NO, did not formally or informally quantify the extra efforts or costs at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the consequences of NOT fixing or delaying to fix,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features",Somewhat agree,Acknowledging debt is important,Somewhat agree,This can be important to show to stakeholders,Somewhat agree,Acknowledging debt is important,Neither agree nor disagree,,Neither agree nor disagree,,Uncertain,Knowledge/expertise,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,,,,,,,,,,,,,,Other (Please specify the type and why),,,,,,Unsure,Other (Please specify the type and why),,,,,,Unsure,Other (Please specify the type and why),,,,,,Unsure,Neither agree nor disagree,,Neither agree nor disagree,,Neither agree nor disagree,,Unsure,,Norway,Large Business - International,"Agriculture,Automotive,Avionics,Cultural organizations,Distribution / Transportation/ Logistics,e-Commerce,Education,Energy,Finance,Healthcare,Human Resources,Insurance,Manufacturing,Manufacturing other Organic products,Railway,Security,Telecommunication",,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Other (Please specify),PhD student in a university,"Validating requirements, e.g., through user feedback,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring",,1-2 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level",,Having to change the implementation of my application as a consequence of undocumented requirements,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level",,During implementing software features,,"NO, did not formally or informally quantify the effort or cost to fix at all",There are NO reliable ways to quantify the effort or cost,,"NO, did not formally or informally quantify the benefit of fixing at all",There are NO reliable ways to quantify the benefit,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were rework code costs, e.g., refactoring software code",,"NO, did not formally or informally quantify the extra efforts or costs at all",Some decisions are made by experience (expert judgment) rather than by quantifying the consequences,,During implementing software features,Somewhat agree,,Strongly agree,,Somewhat agree,,Strongly agree,,Somewhat agree,,I am not aware of any tool or technique that could be useful,None i could think of,,,"NO, the problem was not related to veracity requirements at all",,,,,,Somewhat agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Financial Data,,,"Issues with financial data can have, in my opinion, drastic negative consequences, so they must be addressed as the most important ones",,,,Financial Data,,,Same reasoning as above,,,,Financial Data,,,same as above,,,,Strongly agree,,Strongly agree,,Strongly agree,,I am not aware of any tool of technique,I cannot think of other additional factors,Italy,Small Business - International,Education,,"Traditional software development, i.e., Waterfall",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,1-2 years,"Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,"There is a code update in which I was using the previous code version to train the model, but the code has just fixed the issue and updated the code immediately. However, I was using the old version of the code; the trained model was not usable, and I had to retrain the model.",Lack of requirements traceability,,We fixed them only when the end user complained after delivery,,"Yes, informally quantified the effort or cost to fix, e.g., had some expectation of cost in terms of effort spent",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS)",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"During implementing software features,Quick fixes just before delivering the software",Somewhat agree,It depends on the task. ,Somewhat agree,It depends on the task. ,Somewhat agree,It depends on the task. ,Strongly agree,"When cost is insufficient, the benefit must be quantified.",Somewhat agree,I agree with the statement.,"For my case, I am using cloud server to train model, the cloud server can provide a platform to record how much GPU resources do I pay and its cost.",I would see how user can easily use the software should be a factor to be considered.,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,"Yes, that was precisely veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,,,,,,,,,,,,,,Data,,,,,,,Financial Data,,,,,,,Process,,,,,,,Somewhat agree,,Strongly agree,,Somewhat agree,,I would use Excel to summary the cost.,User feedback,New Zealand,Small to Medium Business (SME) - International,Other (Please specify),AI Software Company,A hybrid approach of both traditional and agile approaches,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Other (Please specify),Researcher and Machine Learning engineer ,"Validating requirements, e.g., through user feedback,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring",,Less than an year,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Other (Please specify)",As a researcher there are possibilities of not having a clear user requirement. Rather one should experiment to find possible use cases,Developers invested 4-5 months of time on a project hoping the customers will benefit from it. But the outcome didn't meet the customer expectation. Hence he entire project was scrapped. ,"Not capturing essential user needs while gathering requirements,Changes in the requirements documentation,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,We DID NOT fix them,,,,,,,,Other (Please specify),The entire project was scrapped ,,,,"During implementing software features,During testing the software features",Strongly agree,Reduces unnecessary expenses interms of time and money ,Strongly agree,,Strongly agree,Can estimate the efforts need to be out after the product is delivered to the customer ,Strongly agree,,Strongly agree,,,Time and reputation ,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"NO, the problem was not related to veracity requirements at all",,,Didn't have any experience as such,,,Strongly agree,Not considering the cost can lead to damage in reputation ,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Data,,"Data is the base for any software solution. Data can be in any forms, confidential, personal, patented etc. Measuring the impact of the usage of data at early stage will prevent a company from loosing it's reputation and saving cost. ",,,,,Regulatory,To reduce unnecessary fines. ,,,,,,Process,,,,,,,Strongly agree,,Strongly agree,,Strongly agree,,,,Germany,Large Business - International,"Agriculture,Automotive,Energy,Manufacturing,Manufacturing other Organic products",,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring",,2-5 years,"Not capturing essential user needs while gathering requirements,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,,"Changes in the requirements documentation,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,During implementing software features,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"During designing the software architecture,During implementing software features",Strongly agree,,Strongly agree,,Neither agree nor disagree,,Somewhat agree,,Neither agree nor disagree,,,,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data",,"Yes, that included veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,,,,,,,,,,,,,,Data,,,,,,,Data,,,,,,,Cultural,,,,,,,Somewhat agree,,Neither agree nor disagree,,Somewhat agree,,,,Sri Lanka,Small to Medium Business (SME) - Domestic,Finance,,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Other (Please specify),General Manager,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Lack of requirements traceability",,,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation",,Before designing or implementing the software system,,,,,,,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were new design costs, e.g., adding new components to the software architecture",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,,Somewhat agree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,Neither agree nor disagree,,"In terms of high level tools and techniques usually its something like Excel or tables in Jira to document technical debt incurred, sometimes we use specifical technical debt risk registers depending on the project. In terms of more specific tools that help to quantify costs and benefits there are linters",,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,,,,,,,,,,,,,,Other (Please specify the type and why),,,,,,I feel that they are all important and trying to pick one over the rest will leave gaps when it comes to making an informed decision,,,,,,,,Cultural,,,,,I picked this one because at the end of the day you are designing software for people and the considerations of what benefits them should be the main reason for developing a piece of software.,,Somewhat agree,,Strongly agree,,Strongly agree,,"Would be the same as before: Excel, Jira, linters",,New Zealand,Small to Medium Business (SME) - Domestic,"Cultural organizations,Education,Finance,Government Regulations / Policies,Insurance",,A hybrid approach of both traditional and agile approaches,,
87,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Validating requirements, e.g., through user feedback",,1-2 years,"Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level",,Before designing or implementing the software system,,,,,,,,"Yes, there were new Requirements Engineering (RE) costs, e.g., having to conduct new user interviews",,,,,Before designing or implementing the software system,Somewhat disagree,,Somewhat agree,,Neither agree nor disagree,,Somewhat agree,,Somewhat agree,,,,"Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements",Regulatory Veracity requirements: compliance with standards and regulations,,,,,,,,,,,,,,,Data,,,,,,,Cultural,,,,,,,Data,,,,,,,Somewhat agree,,Somewhat agree,,Neither agree nor disagree,,,,,,,,,,
51,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Fixing bugs,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,2-5 years,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,"We started developing our software before doing any actual requirements analysis, just working off our own opinions on what might be needed. This lead to multiple revisions which wasted to weeks of wasted effort.","Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Lack of requirements validation with the user,Lack of requirements traceability",,We DID NOT fix them,,,,,,,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS),Yes, there were new Requirements Engineering (RE) costs, e.g., having to conduct new user interviews",,"NO, did not formally or informally quantify the extra efforts or costs at all","There are reliable ways, but they are time-consuming",,During testing the software features,Strongly agree,Having more information makes decisions easier,Strongly agree,"If you see the benefit, or lack or benefit, it is easier to decide",Strongly agree,Seeing a numerical value always makes things easier to decide,Strongly agree,Definitely better to have more info,Strongly agree,More information makes for better decisions,I dont know,Effort required ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Project Manager/ Product Manager/ Team Lead,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,5-10 years,"Not capturing essential user needs while gathering requirements,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,In order to effectively use the output dataset from an analysis we needed to also include another variable that only appeared in some of the input datasets.,"Not capturing essential user needs while gathering requirements,Changes in the requirements documentation,Lack of requirements validation with the user,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,A quick fix just before delivering the software,,"Yes, informally quantified the effort or cost to fix, e.g., had some expectation of cost in terms of effort spent",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework code costs, e.g., refactoring software code",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features,Quick fixes just before delivering the software",Somewhat agree,,Somewhat agree,,Strongly agree,,Strongly agree,,Somewhat agree,,We usually try to do it on a time and materials basis,Whether we have resources available to fix the problem ,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,,,,,,,,,,,,,,Data,,,,,,,Cultural,,,,,,,Financial Data,,,,,,,Strongly agree,,Strongly agree,,Somewhat agree,,,,New Zealand,Small Business - Domestic,Government Regulations / Policies,,A hybrid approach of both traditional and agile approaches,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Systems Architect/ Software Architect/ Tech Lead,,"Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Lack of requirements validation with the user,Lack of requirements traceability",,,"Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Lack of requirements validation with the user,Inadequate (incorrect or partial) implementation of the requirements,Lack of requirements traceability",,During implementing software features,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"Yes, formally quantified the benefit of fixing, e.g., in terms of market share or expected profit or ROI",,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS),Yes, there were new Requirements Engineering (RE) costs, e.g., having to conduct new user interviews",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features,Quick fixes just before delivering the software",Neither agree nor disagree,,Somewhat disagree,,Neither agree nor disagree,,Somewhat disagree,,Somewhat disagree,,,,"Regulatory Veracity requirements: compliance with standards and regulations,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,"Yes, that was precisely veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,,,,,,,,,,,,,,Process,,,,,,,Process,,,,,,,Process,,,,,,,Somewhat agree,,Somewhat disagree,,Neither agree nor disagree,,,,Sweden,Small to Medium Business (SME) - International,Other (Please specify),Real State,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Lack of requirements traceability",,Fixing a solid and agreeable end to when and what determines the end of a specific project. The tangibles of the project completion was not clear,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Lack of requirements traceability",,During testing the software features,,"NO, did not formally or informally quantify the effort or cost to fix at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the effort or cost to fix,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS)",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features",Somewhat agree,,Strongly agree,,Strongly agree,,Somewhat agree,,Somewhat agree,,Design decisions also computational costs and time,Long term use and future needs of what is being built,Regulatory Veracity requirements: compliance with standards and regulations,,"NO, the problem was not related to veracity requirements at all",,,N/a,Other (Please specify),Recent issues weren't veracity related ,Strongly agree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,Strongly agree,,Process,,,,,,,Cultural,,,,,,,Financial Data,,,,,,,Neither agree nor disagree,,Somewhat agree,,Strongly agree,,N/a,"Loosing customers, non renewing licenses, drop in future contracts, drop in trust ",United States of America,Large Business - Domestic,Agriculture,,A hybrid approach of both traditional and agile approaches,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Systems Architect/ Software Architect/ Tech Lead,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,More than 10 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Inadequate (incorrect or partial) implementation of requirements,Other (Please specify)",Internal haggles on business process owners with overlapping interests. Not being able to tie down to a decision. ,"Lack of a unified process for change management, had the requirements bogged down with “but the old system” among stakeholders. This was not an absence of new system not fulfilling business requirements, but a resistance to let go of familiar processes.","Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Lack of requirements validation with the user",,During designing the software architecture,,,,,,,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS)",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"During designing the software architecture,During testing the software features",Somewhat agree,While many stakeholders will use this information to analyze impact of overall project and budgets. Some would stick only to numbers and end up with a sub optimal system because of being too conservative.,Somewhat agree,The effect of internal stakeholder policies and politics can affect rational decision making regardless. ,Strongly agree,Business cost is a strong driver ,Strongly agree,,Somewhat disagree,,,,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,"NO, the problem was not related to veracity requirements at all",,,,,,Somewhat disagree,Generally in domains in our operations Varacity requirements are not optional. It’s business critical. Analysis is just for budgets.,Somewhat disagree,,Somewhat disagree,,Somewhat disagree,,Somewhat disagree,,Regulatory,,,,,,,Financial Data,,,,,,,Regulatory,,,,,,,Somewhat agree,Some Data related policies if not captured early could lead to significant rework on data storage and security.,Somewhat disagree,,Neither agree nor disagree,"If own product highly agree. On the scale of a service provider, capturing varacity needs is a partnership with stakeholder. Business process owners have more responsibility to clearly establish regulatory and other compliance requirements.",Domain knowledge is paramount. Having legal or domain experts look into compliance requirements early on is important. In one instance when building software for medical devices a question put forth to the device owners were the scope of regulation the software development team should be aware of.  This early on questioning made sure required compliance in design and coding were a consideration before starting. ,Legal liabilities ,Sri Lanka,Small Business - International,"Compliance, Audits and Certification,Distribution / Transportation/ Logistics,Enterprise Resource Planning (ERP),Healthcare,Insurance",,A hybrid approach of both traditional and agile approaches,,
51,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor,Other (Please specify)","Research & Development in new technical areas that benefits the company in the long run. Ex: Blockchain, AI",More than 10 years,"Not capturing essential user needs while gathering requirements,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,,"Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases",,During designing the software architecture,,,,,,,,"Yes, there were rework design costs, e.g., redesigning the software architecture",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"Before designing or implementing the software system,During designing the software architecture",Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
33,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,time elapsed ,Not documenting requirements at all,,Before designing or implementing the software system,,,,,,,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were rework code costs, e.g., refactoring software code",,"NO, did not formally or informally quantify the extra efforts or costs at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the consequences of NOT fixing or delaying to fix,,Before designing or implementing the software system,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Other (Please specify),Researcher in University,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams",,1-2 years,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Lack of requirements validation with the user",,We captured and documented requirements but the stakeholder did not implemented them. The reason for that was not clear. We did not know if the requirements were incorrectly documented (even though documentation was validated) or if the scope of the project changed.,Other (Please specify),"Miscommunication with stakeholders, who approved requirements' documentation but did not use it.",We DID NOT fix them,,,,,,,,"Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS)",,"NO, did not formally or informally quantify the extra efforts or costs at all",Some decisions are made by experience (expert judgment) rather than by quantifying the consequences,,It's NOT a common practice to fix problems with requirements unless the end user complains,Strongly agree,,Strongly agree,,Strongly agree,,Somewhat disagree,,Somewhat disagree,,"I am not familiar with specific tools or techniques. A metric that I am familiar with is working hours; for example, a fix is going to cost 3 hours of one or more professionals.",I believe these factors are enough.,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements","Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,,,,,,,,,,,,,,Financial Data,,,"In addition to the costs associated to the project execution, this is going to impact stakeholders' revenue once the system/solution is in use.",,,,Process,,,,It is easier to think about the long-term benefits to the business/stakeholders.,,,Data,,Data accuracy and correctness are very important and not fixing issues related to these will impact the system in the short-term.,,,,,Strongly agree,,Somewhat agree,,Strongly agree,,"Jira, Confluence and GitHub (or other source code repositories) may have some relevant metrics, especially regarding transparency.",I believe these factors are enough.,New Zealand,Large Business - Domestic,Education,,A hybrid approach of both traditional and agile approaches,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor,Other (Please specify)",infrastructure management,5-10 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Inadequate (incorrect or partial) implementation of requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,trying to automate a complex process without its full knowledge,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Lack of requirements validation with the user,Lack of requirements traceability",,During testing the software features,,"NO, did not formally or informally quantify the effort or cost to fix at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the effort or cost to fix,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,Other (Please specify),bugs would be raised.,,,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Not capturing essential user needs while gathering requirements,Changes in the requirements documentation",,Receiving a lot of requirements changes when it is close to deadlines,"Changes in the requirements documentation,Lack of requirements validation with the user",,During implementing software features,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"Yes, formally quantified the benefit of fixing, e.g., in terms of market share or expected profit or ROI",,,,,,,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features",Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Somewhat agree,,,,Regulatory Veracity requirements: compliance with standards and regulations,,,,,,,,,,,,,,,,,,Process,,,,,,,Process,,,,,,,Process,,,,,,,Strongly agree,,Strongly agree,,Strongly agree,,,,,,"Distribution / Transportation/ Logistics,e-Commerce,Energy,Enterprise Resource Planning (ERP),Finance",,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Business Analyst/ Requirements Engineer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level",,,"Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,During designing the software architecture,,,,,,,,"Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were new code costs, e.g., writing new software code",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features,Quick fixes just before delivering the software",Somewhat agree,,Somewhat agree,,Neither agree nor disagree,,Somewhat agree,,Somewhat agree,,,,"Financial Data Veracity requirements: correctness of banking, tax, and accounting data",,"Yes, that was precisely veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Neither agree nor disagree,,Neither agree nor disagree,,Neither agree nor disagree,,,,,,,,,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Making improvements to the code, i.e., Refactoring,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,Less than an year,"Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements",,,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases",,During implementing software features,,"NO, did not formally or informally quantify the effort or cost to fix at all",Some decisions are made by experience (expert judgment) rather than quantifying efforts or costs,,"NO, did not formally or informally quantify the benefit of fixing at all",Some decisions are made by experience (expert judgment) rather than by quantifying benefits,,"Yes, there were new design costs, e.g., adding new components to the software architecture",,"NO, did not formally or informally quantify the extra efforts or costs at all",Some decisions are made by experience (expert judgment) rather than by quantifying the consequences,,During implementing software features,Strongly agree,,Strongly agree,,Strongly agree,,Neither agree nor disagree,,Strongly agree,,,"Resource management (allocation), communication","Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,"NO, the problem was not related to veracity requirements at all",,,,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Process,,,,,,,Process,,,,,,,,,,,,,,Strongly agree,,Strongly agree,,Strongly agree,,,Team-level trust,New Zealand,Large Business - International,e-Commerce,,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring",,More than 10 years,"Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements,Lack of requirements traceability",,Cloud Migration of the system,"Inadequate (incorrect or partial) implementation of the requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,During implementing software features,,"NO, did not formally or informally quantify the effort or cost to fix at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the effort or cost to fix,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were new design costs, e.g., adding new components to the software architecture",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"Before designing or implementing the software system,During designing the software architecture",Somewhat agree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,SAP NetWeaver,Late bugs on production,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data",,"Yes, that included veracity requirements","Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,,,,,,,,,,,,,,Data,,,,,,,Regulatory,,,,,,,Financial Data,,,,,,,Somewhat agree,,Somewhat agree,,Somewhat agree,,Value of Information (VOI) Analysis,Impact on Trust and Reputation,Sweden,Large Business - International,Telecommunication,,A hybrid approach of both traditional and agile approaches,,worked greatly
44,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",QA Manager/ QA Lead/ Quality Assurance Engineer (QAE),,"Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,More than 10 years,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Lack of requirements validation with the user",,"Retest a whole functionality and perform regression, a duplicate of work.","Changes in the requirements documentation,Lack of requirements validation with the user,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,During testing the software features,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"Yes, formally quantified the benefit of fixing, e.g., in terms of market share or expected profit or ROI",,,"Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code,Yes, there were new Requirements Engineering (RE) costs, e.g., having to conduct new user interviews",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"Before designing or implementing the software system,During designing the software architecture",Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Somewhat agree,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
51,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Other (Please specify),Director of Product,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,"A project requirements were defined with limited involvement from technology team. This led to technical considerations and requirements being missed, and the requirements having to change because what had been scoped was not viable within the timeframe.","Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Other (Please specify)",Lack of technical input into requirements.,During implementing software features,,"NO, did not formally or informally quantify the effort or cost to fix at all","There are reliable ways, but they are time-consuming",,"NO, did not formally or informally quantify the benefit of fixing at all",Other (Please specify),It was not deemed a priority to do so.,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework Requirements Engineering (RE) costs, e.g., refining the System Requirements Specification (SRS)",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"During designing the software architecture,During implementing software features",Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Impact modelling (e.g. using tools like DoubleLoop),"Risk & Compliance, opportunity cost",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Other (Please specify),Data scientist,"Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Other (Please specify)",developing models,2-5 years,"Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Inadequate (incorrect or partial) implementation of requirements",,"Unclear requirements leading to a moving goalpost, pushback of delivery date.",Inadequate (incorrect or partial) implementation of the requirements,,We fixed them only when the end user complained after delivery,,"NO, did not formally or informally quantify the effort or cost to fix at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the effort or cost to fix,,"NO, did not formally or informally quantify the benefit of fixing at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the benefit of fixing,,"NO, there were no consequences",,,,,It's NOT a common practice to fix problems with requirements unless the end user complains,Neither agree nor disagree,,Somewhat agree,,Somewhat agree,,Neither agree nor disagree,,Somewhat agree,,,,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,"NO, the problem was not related to veracity requirements at all",,,,,,Somewhat agree,,Neither agree nor disagree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,Data,,,,,,,Data,,,,,,,Regulatory,,,,,,,Somewhat agree,,Strongly agree,,Somewhat agree,,,,United Kingdom of Great Britain and Northern Ireland,Large Business - International,Energy,,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Business Analyst/ Requirements Engineer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Implementing feature enhancements,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Lack of requirements traceability",,"During customer engagement, we were able to gathered all the required information relating to their business processes but during the CRP customer was mentioning a process which was not initially communicated which led to change the whole architectural design of one business functional stream.","Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Lack of requirements validation with the user",,During testing the software features,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework design costs, e.g., redesigning the software architecture",,"NO, did not formally or informally quantify the extra efforts or costs at all",Some decisions are made by experience (expert judgment) rather than by quantifying the consequences,,During testing the software features,Strongly agree,,Strongly agree,,Neither agree nor disagree,,Strongly agree,,Strongly agree,,,,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,"Yes, that included veracity requirements","Process Veracity requirements: adherence to organizational policies, processes, methods, and practices",,,,,,,,,,,,,,,Process,,,,,,,Regulatory,,,,,,,Cultural,,,,,,,Strongly agree,,Strongly agree,,Strongly agree,,,,Switzerland,Large Business - International,Enterprise Resource Planning (ERP),,A hybrid approach of both traditional and agile approaches,,
44,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,Making architectural design decisions to accommodate user and system requirements,,More than 10 years,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Inadequate (incorrect or partial) implementation of requirements,Lack of requirements traceability",,Lack of discussion among the people involved throughout the develop cycle.,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Lack of requirements validation with the user,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,Before designing or implementing the software system,,,,,,,,"Yes, there were rework design costs, e.g., redesigning the software architecture",,"NO, did not formally or informally quantify the extra efforts or costs at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the consequences of NOT fixing or delaying to fix,,During testing the software features,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
33,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Other (Please specify),PhD in SE and AI,Other (Please specify),Come up with research question and tackle them with using  research and empirical methods ,2-5 years,"Not documenting requirements at all,Changes in the requirements documentation,Lack of requirements validation with the user,Inadequate (incorrect or partial) implementation of requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,"Often times , we don't have the full requirement , So in my line of work it is mostly prototyping and testing with additional  requirements ","Not capturing essential user needs while gathering requirements,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Lack of requirements validation with the user,Inadequate (incorrect or partial) implementation of the requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,Other (Please Specify),Every project we work on is novel research so we have to  constantly adapt based on the empirical methods by experimenting and validating,,,,,,,"Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code",,"NO, did not formally or informally quantify the extra efforts or costs at all","There are reliable ways, but they are expensive",,"During implementing software features,During testing the software features,Quick fixes just before delivering the software",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
51,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,More than 10 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,,"Not capturing essential user needs while gathering requirements,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,During implementing software features,,"NO, did not formally or informally quantify the effort or cost to fix at all",Some decisions are made by experience (expert judgment) rather than quantifying efforts or costs,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were new code costs, e.g., writing new software code",,"Yes, informally quantified the extra efforts or costs, e.g., had some expectation of extra costs in terms of extra effort spent",,,"During implementing software features,During testing the software features,Other (Please Specify)",Somewhat agree,"higher the cost is, the sooner it should be fixed. Postponing it will only add to the cost. However, a cost too high is also an indicator of if it should be fixed at all. .",Somewhat agree,This is always coupled with the cost. Quantified Benefit/Cost ratio should help make the decision.,Somewhat agree,This would complement the benefit/cost ratio. All 3 would form a reliable indicator for the decision.,Strongly agree,,Strongly agree,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,2-5 years,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Lack of requirements validation with the user,Inadequate (incorrect or partial) implementation of requirements",,"End users were encouraged to expect a system that would dramatically simplify their day-to-day business activities, but this was misleading, since the key ingredients needed to actually implement the system were downplayed. In truth, implementing the system that end users expect would require both (a) integrating many existing systems (achievable in principle, but likely requiring thousands of person-hours), and (b) either the ongoing involvement of human domain experts, or software technology that no one knows how to build yet.","Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of the requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,We DID NOT fix them,,,,,,,,Other (Please specify),"The true costs remain to be seen, however it is likely that the main consequence will not be a financial cost to our organisation per se, but rather damage to the broad level of trust between this category of customers and organisations like our own in future.",,,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,Quick fixes just before delivering the software",Strongly agree,"Making the choice that maximises E[NPV(benefit) - NPV(cost)] within relevant formal and informal constraints (including constraints on acceptable risk) is the rational way to approach all business decisions, including this one. But since making such estimates itself has costs, and the resulting estimates have variance (so that, past some point, spending more effort quantifying does not lead to much more accurate estimates), the effort spent making these estimates must itself be balanced against their potential benefit.",Strongly agree,,Neither agree nor disagree,"I think this question is redundant given the previous question (""Quantifying the benefit of fixing...""): the ""benefit of fixing"" is necessarily the (estimated) difference between two states, one being ""fixed"" and the other being some baseline. But surely the only sensible choice of baseline is ""NOT fixed""? When comparing possible choices of action (e.g., to fix vs. to not fix), all possibilities need to be compared to a common baseline, meaning that the current question is asking about comparing ""NOT fixed"" with the baseline (also ""NOT fixed""), and they are identical. For the current question to be meaningful, a different baseline would need to be chosen -- but I don't see how that would add anything over simply dropping this question and focusing on the previous one.",Strongly agree,,Strongly agree,"As I said in an earlier comment, I think this is equivalent to the benefit of fixing. Whichever way the question is framed, it is important to quantify.",I'm not familiar with any such tools.,"Formal constraints like regulatory compliance requirements are arguably outside of costs, benefits and consequences.","Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements","Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,,,,,,,,,,,,,,Regulatory,"There is no point gathering only the cost or only the benefit for a specific requirement type, and since I think regulatory requirements are the clear winner for the next question, it follows that I need to make the same choice for this question.",,,,,,Regulatory,"Simply because the cost of noncompliance for regulatory violations is usually the easiest to quantify -- e.g., a fee may be explicitly listed in legislation.",,,,,,Other (Please specify the type and why),,,,,,"I think this question is redundant with the previous question, as explained earlier.",Neither agree nor disagree,Higher than what?,Strongly agree,"If the desired level of veracity is met, then there is necessarily no problem to fix. The statement amounts to ""The consequences of not fixing a problem with veracity requirements can have a much higher impact on the end-user than [no impact at all]"", which is necessarily always true.",Neither agree nor disagree,Higher than what?,"I'm not aware of any such tools, though that could be just my own ignorance. I would certainly welcome having them.","I can't think of other factors specific to veracity. Costs, benefits and consequences surely captures everything relevant?",New Zealand,Small to Medium Business (SME) - Domestic,"Viticulture/ Organic Viticulture,Compliance, Audits and Certification,Government Regulations / Policies,Winemaking/ Organic Winemaking,Security",,A hybrid approach of both traditional and agile approaches,,
71,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,More than 10 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements",,"Few months ago I have developed a feature which was refined and ready to build. But when I tried to push that for testing, it was put on hold as the priorities changed. Later they have realized that the said feature is not required in current application. ","Not capturing essential user needs while gathering requirements,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,During testing the software features,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"NO, did not formally or informally quantify the benefit of fixing at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the benefit of fixing,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were rework code costs, e.g., refactoring software code",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features",Strongly agree,,Strongly agree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,,,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"NO, the problem was not related to veracity requirements at all",,,"The project I am working on is a Digital License application for one of the state government. Recently our application went live, but the application was not downloaded as expected (Expected above 1 million downloads within 3 months, but got only 400000 downloads). Major feedback we received from the general public was that they prefer not to use digital license over physical card due to lack of trust towards digital wallets.","Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Other (Please specify),Researcher,"Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,Less than an year,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level",,,,,,,,,,,,,,,,,,During implementing software features,Somewhat agree,Depends on the size of the project as to whether this would be worthwhile.,Somewhat agree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,Unaware of existing tools.,Effort spent learning the new skillset of better managing RTD.,,,"NO, the problem was not related to veracity requirements at all",,,,,,Somewhat agree,"Similarly for regular requirements, depends on the size of the project.",Somewhat agree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,Data,,This can be considered to encapsulate some of the other types of veracity requirements.,,,,,Data,,Same reason as above.,,,,,Data,,Same as above.,,,,,Strongly agree,,Somewhat agree,,Somewhat agree,,"To start with, having meetings where Veracity RTD is on the agenda.",Whether there is sufficient time available to work through the problems.,New Zealand,Small Business - Domestic,Other (Please specify),Research,A hybrid approach of both traditional and agile approaches,,Thanks - all the best!
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Systems Architect/ Software Architect/ Tech Lead,,"Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements",,Backend development of a new API was started without a previously defined concept/architecture. The estimation of the feature was off by a month and it was hard for the PO to understand the actually implemented functionality in the process.,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Other (Please specify)","No previously defined architecture, unclear DoD in tickets, feature was not fully specified through tickets",During implementing software features,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"NO, did not formally or informally quantify the benefit of fixing at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the benefit of fixing,,,,,,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features,Quick fixes just before delivering the software",Strongly agree,Important for the PO to evaluate whether the issue should be fixed. Important for the dev team to check whether there is a common understanding about the scope to fix the issue,Strongly agree,important for the PO to prioritize when it should be fixed,Strongly agree,"e.g. feature might be hard to understand for the end user, other teams could be blocked by not fixing an issue",Strongly agree,the benefit is important to prioritize / deprioritize the fix,Somewhat disagree,If no one expects any severe consequences an implmentation is good enough for now. This can still be later revisited when the consequences would change.,"Refinements with story estimations. Writing user stories also for technical tasks (""As a developer - I want - so that""). Documenting decisions (e.g. we will not refactor the code)",availability of the dev team e.g. other planned features which should be implemented,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"NO, the problem was not related to veracity requirements at all",,,Incorrect push notifications were sent to mobile clients because of changing requirements,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Somewhat disagree,,Data,,Needed for release planning of features,,,,,Process,,,,It is negociable whether it should be fixed in contrast to e.g. financial data / regulatories were it could be required to fix it,,,Process,,,,,,,Strongly disagree,independent of whether it is a veracity requirement,Somewhat disagree,e.g. it is bad when incorrect data is displayed but it could be just as severe if the UX is bad and the user does not understand the data,Somewhat agree,reputation but also possible fines,"interviews with experts, refinements, story estimations",,Germany,Large Business - International,Automotive,,A hybrid approach of both traditional and agile approaches,,
53,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Project Manager/ Product Manager/ Team Lead,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements",,5-10 years,"Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
60,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,1-2 years,"Inadequate (incorrect or partial) implementation of requirements,Lack of requirements traceability",,,"Inadequate (incorrect or partial) implementation of the requirements,Lack of requirements traceability",,During implementing software features,,"NO, did not formally or informally quantify the effort or cost to fix at all","There are reliable ways, but they are time-consuming",,,,,"NO, there were no consequences",,,,,During implementing software features,Neither agree nor disagree,,Neither agree nor disagree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,,,"Financial Data Veracity requirements: correctness of banking, tax, and accounting data",,"NO, the problem was not related to veracity requirements at all",,,,"Financial Data Veracity requirements: correctness of banking, tax, and accounting data",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Product Owner (PO),,"Capturing user needs, e.g., through stakeholder interviews, user forums, and observations,Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,2-5 years,Lack of requirements traceability,,,Lack of requirements traceability,,We DID NOT fix them,,,,,,,,"NO, there were no consequences",,,,,During implementing software features,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,,,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,"NO, the problem was not related to veracity requirements at all",,,,,,Neither agree nor disagree,,Neither agree nor disagree,,Somewhat agree,,Somewhat agree,,Strongly agree,,Process,,,,,,,Process,,,,,,,Process,,,,,,,Neither agree nor disagree,,Somewhat agree,,Somewhat agree,,,,New Zealand,Small Business - Domestic,"Compliance, Audits and Certification,Other (Please specify)",Construction industry,A hybrid approach of both traditional and agile approaches,,
98,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Systems Architect/ Software Architect/ Tech Lead,,"Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Prioritizing requirements, e.g., in the System Requirements Specification (SRS) or as User Stories in a product backlog,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,Requirements were not fulfilled or only partially fulfilled in time or at all by third party SDK deliveries. E.g. offline map support for navigation,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of the requirements,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design,Lack of requirements traceability",,A quick fix just before delivering the software,,"NO, did not formally or informally quantify the effort or cost to fix at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the effort or cost to fix,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were rework design costs, e.g., redesigning the software architecture,Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code",,"NO, did not formally or informally quantify the extra efforts or costs at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the consequences of NOT fixing or delaying to fix,,"Before designing or implementing the software system,During designing the software architecture,During implementing software features,During testing the software features,Quick fixes just before delivering the software",Neither agree nor disagree,It depends on the RTD and the impact of it,Strongly agree,,Strongly agree,,Strongly agree,,Somewhat disagree,"If the consequences are high, delaying the fix Wil result most probably in even more effort and costs.","Retrospectives, Estimations, Estimations of future tasks with&without fixing RTD beforehand.",Operational planning (if there is enough man power to fix it and maintenance),,,"NO, the problem was not related to veracity requirements at all",,,Korean maps can only be allowed to be downloaded inside of Korea.,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,Somewhat disagree,In most of my situations fixes/changes need to be made as soon as possible,Neither agree nor disagree,Depends on the VRED,Strongly agree,,Strongly agree,,Neither agree nor disagree,Depends on the VRED,Financial Data,,,VRED in financial data will most probably cost money if they are not fixed. Comparison of both costs will be very useful.,,,,Process,,,,"If there is a huge benefit of fixing process depts, all tasks in the future will also benefit from it.",,,Regulatory,Not fixing regulatory compliances could have huge consequences and fines,,,,,,Somewhat agree,The effort will grow by time,Neither agree nor disagree,Depends on the VRED,Somewhat agree,Depends on the VRED,,,Germany,Large Business - International,"Automotive,Distribution / Transportation/ Logistics,Energy,Insurance,Manufacturing,Telecommunication",,A hybrid approach of both traditional and agile approaches,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,2-5 years,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements,Inadequate (incorrect or partial) implementation of requirements",,"Working one features one by one, without looking at the whole picture. So there were many change in the original implementation of features as well.","Not capturing essential user needs while gathering requirements,Changes in the requirements documentation,Inadequate (incorrect or partial) implementation of the requirements",,During implementing software features,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"Yes, informally quantified the benefit of fixing, e.g., had some expectation of benefit in terms of project completion time",,,"Yes, there were new design costs, e.g., adding new components to the software architecture,Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,"During designing the software architecture,During implementing software features,During testing the software features",Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,Strongly agree,,,,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"Yes, that included veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,,,,,,,,,,,,,,Financial Data,,,it was a banking app so trades have to be accurate.,,,,Cultural,,,,,The brand and the reputation attracts more customers,,Regulatory,"Banking has to adhere to regulatory, if not could face many consequences and fines",,,,,,Somewhat agree,,Strongly agree,,Strongly agree,,,,Singapore,Large Business - International,Finance,,"Agile software development, i.e., Continuous Software Engineering",,Very well detailed and guided. 
16,False,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",,,,,1-2 years,"Not capturing essential user needs while gathering requirements,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,Having new clients and prioritizing new requirements to meet their needs. These requirements causes conflicts with ongoing development and causes issues when merging both changes. ,"Lack of requirements validation with the user,Requirements are not satisfied by the system design, i.e., the end-user satisfaction level is not met by the architectural design",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Documenting requirements, e.g., in a System Requirements Specification (SRS), as User Stories, as Use Case Diagrams,Validating requirements, e.g., through user feedback,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Testing or writing tests, e.g., to validate that requirements have been implemented correctly, to test that the software functions",,1-2 years,"Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Lack of requirements validation with the user,Trade-offs between what requirements to implement during prioritization of requirements e.g., de-scoping non-functional requirements",,,"Ambiguities in requirements documentation e.g., in Systems requirements Specification (SRS) or User Stories or Use Cases,Changes in the requirements documentation,Lack of requirements validation with the user",,During implementing software features,,"Yes, formally quantified the effort or cost to fix, e.g., in person-hours/ story points/ dollars or other currency",,,"NO, did not formally or informally quantify the benefit of fixing at all",I am not the decision-maker; higher management roles make decisions. So I did not need to quantify the benefit of fixing,,"NO, there were no consequences",,,,,"Before designing or implementing the software system,During implementing software features,During testing the software features,Quick fixes just before delivering the software",Somewhat agree,,Somewhat agree,,Somewhat agree,,Somewhat agree,,Somewhat disagree,,,,"Regulatory Veracity requirements: compliance with standards and regulations,Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems,Financial Data Veracity requirements: correctness of banking, tax, and accounting data,Process Veracity requirements: adherence to organizational policies, processes, methods, and practices,Cultural Veracity requirements: requirements related to, e.g., trust within society, culture, brand",,"NO, the problem was not related to veracity requirements at all",,,,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,Somewhat agree,,Somewhat agree,,Somewhat agree,,Somewhat disagree,,Somewhat disagree,,Financial Data,,,,,,,Cultural,,,,,,,Financial Data,,,,,,,Somewhat disagree,,Somewhat agree,,Somewhat agree,,,,,Small to Medium Business (SME) - Domestic,Finance,,"Agile software development, i.e., Continuous Software Engineering",,
100,True,"I have read the Participant Information Sheet (PIS), take me to the questionnaire.",Software Engineer/ Systems Engineer/ Developer,,"Validating requirements, e.g., through user feedback,Making architectural design decisions to accommodate user and system requirements,Writing or modifying software code to implement features that satisfy the requirements,Implementing feature enhancements,Fixing bugs,Making improvements to the code, i.e., Refactoring,Making decisions on behalf of the team, e.g., what requirements to implement, what to refactor",,5-10 years,"Not capturing essential user needs while gathering requirements,Not documenting requirements at all,Insufficient documentation of requirements, i.e., information scattered in different places, requirements are specified only at a high level,Inadequate (incorrect or partial) implementation of requirements",,,Not capturing essential user needs while gathering requirements,,A quick fix just before delivering the software,,"NO, did not formally or informally quantify the effort or cost to fix at all",Some decisions are made by experience (expert judgment) rather than quantifying efforts or costs,,"NO, did not formally or informally quantify the benefit of fixing at all",Some decisions are made by experience (expert judgment) rather than by quantifying benefits,,"Yes, there were rework code costs, e.g., refactoring software code,Yes, there were new code costs, e.g., writing new software code",,"Yes, formally quantified the extra efforts or costs, e.g., in person-hours/ story points/ dollars or other currency",,,During implementing software features,Neither agree nor disagree,,Neither agree nor disagree,,Neither agree nor disagree,,Neither agree nor disagree,,Neither agree nor disagree,,,,"Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,"Yes, that was precisely veracity requirements","Data Veracity requirements: provenance, transparency, sovereignty, integrity, accuracy, and correctness of data entered into software systems",,,,,,,,,,,,,,,Data,,,,,,,Data,,,,,,,Data,,,,,,,Neither agree nor disagree,,Neither agree nor disagree,,Neither agree nor disagree,,,,,,,,,,
